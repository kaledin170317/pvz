// Code generated by MockGen. DO NOT EDIT.
// Source: internal\\adapters\\db\\pvz_repo.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "pvZ/internal/domain/models"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockPVZRepository is a mock of PVZRepository interface.
type MockPVZRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPVZRepositoryMockRecorder
}

// MockPVZRepositoryMockRecorder is the mock recorder for MockPVZRepository.
type MockPVZRepositoryMockRecorder struct {
	mock *MockPVZRepository
}

// NewMockPVZRepository creates a new mock instance.
func NewMockPVZRepository(ctrl *gomock.Controller) *MockPVZRepository {
	mock := &MockPVZRepository{ctrl: ctrl}
	mock.recorder = &MockPVZRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPVZRepository) EXPECT() *MockPVZRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPVZRepository) Create(ctx context.Context, pvz *models.Pvz) (*models.Pvz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, pvz)
	ret0, _ := ret[0].(*models.Pvz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPVZRepositoryMockRecorder) Create(ctx, pvz interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPVZRepository)(nil).Create), ctx, pvz)
}

// GetByID mocks base method.
func (m *MockPVZRepository) GetByID(ctx context.Context, id string) (*models.Pvz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.Pvz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockPVZRepositoryMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockPVZRepository)(nil).GetByID), ctx, id)
}

// ListWithDateRange mocks base method.
func (m *MockPVZRepository) ListWithDateRange(ctx context.Context, startDate, endDate *time.Time, limit, offset int) ([]models.Pvz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWithDateRange", ctx, startDate, endDate, limit, offset)
	ret0, _ := ret[0].([]models.Pvz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWithDateRange indicates an expected call of ListWithDateRange.
func (mr *MockPVZRepositoryMockRecorder) ListWithDateRange(ctx, startDate, endDate, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWithDateRange", reflect.TypeOf((*MockPVZRepository)(nil).ListWithDateRange), ctx, startDate, endDate, limit, offset)
}
