// Code generated by MockGen. DO NOT EDIT.
// Source: internal\\domain\\usecases\\reception_usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "pvZ/internal/domain/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockReceptionUsecase is a mock of ReceptionUsecase interface.
type MockReceptionUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockReceptionUsecaseMockRecorder
}

// MockReceptionUsecaseMockRecorder is the mock recorder for MockReceptionUsecase.
type MockReceptionUsecaseMockRecorder struct {
	mock *MockReceptionUsecase
}

// NewMockReceptionUsecase creates a new mock instance.
func NewMockReceptionUsecase(ctrl *gomock.Controller) *MockReceptionUsecase {
	mock := &MockReceptionUsecase{ctrl: ctrl}
	mock.recorder = &MockReceptionUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReceptionUsecase) EXPECT() *MockReceptionUsecaseMockRecorder {
	return m.recorder
}

// CloseLast mocks base method.
func (m *MockReceptionUsecase) CloseLast(ctx context.Context, pvzID string) (*models.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseLast", ctx, pvzID)
	ret0, _ := ret[0].(*models.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseLast indicates an expected call of CloseLast.
func (mr *MockReceptionUsecaseMockRecorder) CloseLast(ctx, pvzID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseLast", reflect.TypeOf((*MockReceptionUsecase)(nil).CloseLast), ctx, pvzID)
}

// Create mocks base method.
func (m *MockReceptionUsecase) Create(ctx context.Context, pvzID string) (*models.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, pvzID)
	ret0, _ := ret[0].(*models.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockReceptionUsecaseMockRecorder) Create(ctx, pvzID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockReceptionUsecase)(nil).Create), ctx, pvzID)
}
