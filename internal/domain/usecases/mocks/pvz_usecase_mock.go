// Code generated by MockGen. DO NOT EDIT.
// Source: internal\\domain\\usecases\\pvz_usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "pvZ/internal/domain/models"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockPVZUsecase is a mock of PVZUsecase interface.
type MockPVZUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockPVZUsecaseMockRecorder
}

// MockPVZUsecaseMockRecorder is the mock recorder for MockPVZUsecase.
type MockPVZUsecaseMockRecorder struct {
	mock *MockPVZUsecase
}

// NewMockPVZUsecase creates a new mock instance.
func NewMockPVZUsecase(ctrl *gomock.Controller) *MockPVZUsecase {
	mock := &MockPVZUsecase{ctrl: ctrl}
	mock.recorder = &MockPVZUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPVZUsecase) EXPECT() *MockPVZUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPVZUsecase) Create(ctx context.Context, pvz *models.Pvz) (*models.Pvz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, pvz)
	ret0, _ := ret[0].(*models.Pvz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPVZUsecaseMockRecorder) Create(ctx, pvz interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPVZUsecase)(nil).Create), ctx, pvz)
}

// GetByID mocks base method.
func (m *MockPVZUsecase) GetByID(ctx context.Context, id string) (*models.Pvz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.Pvz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockPVZUsecaseMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockPVZUsecase)(nil).GetByID), ctx, id)
}

// List mocks base method.
func (m *MockPVZUsecase) List(ctx context.Context, startDate, endDate *time.Time, limit, offset int) ([]models.Pvz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, startDate, endDate, limit, offset)
	ret0, _ := ret[0].([]models.Pvz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPVZUsecaseMockRecorder) List(ctx, startDate, endDate, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPVZUsecase)(nil).List), ctx, startDate, endDate, limit, offset)
}
