// Code generated by MockGen. DO NOT EDIT.
// Source: internal\\domain\\usecases\\product_usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "pvZ/internal/domain/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProductUsecase is a mock of ProductUsecase interface.
type MockProductUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockProductUsecaseMockRecorder
}

// MockProductUsecaseMockRecorder is the mock recorder for MockProductUsecase.
type MockProductUsecaseMockRecorder struct {
	mock *MockProductUsecase
}

// NewMockProductUsecase creates a new mock instance.
func NewMockProductUsecase(ctrl *gomock.Controller) *MockProductUsecase {
	mock := &MockProductUsecase{ctrl: ctrl}
	mock.recorder = &MockProductUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductUsecase) EXPECT() *MockProductUsecaseMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockProductUsecase) AddProduct(ctx context.Context, pvzID, productType string) (*models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", ctx, pvzID, productType)
	ret0, _ := ret[0].(*models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockProductUsecaseMockRecorder) AddProduct(ctx, pvzID, productType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockProductUsecase)(nil).AddProduct), ctx, pvzID, productType)
}

// DeleteLast mocks base method.
func (m *MockProductUsecase) DeleteLast(ctx context.Context, pvzID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLast", ctx, pvzID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLast indicates an expected call of DeleteLast.
func (mr *MockProductUsecaseMockRecorder) DeleteLast(ctx, pvzID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLast", reflect.TypeOf((*MockProductUsecase)(nil).DeleteLast), ctx, pvzID)
}
